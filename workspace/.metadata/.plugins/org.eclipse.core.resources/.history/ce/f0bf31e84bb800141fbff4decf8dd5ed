
package ch.hearc.coursjava.moo.heritage.dessin;

import static org.junit.Assert.assertTrue;

import java.awt.Rectangle;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import ch.hearc.coursjava.kitbase.tools.MathTools;

public class TestDessin
	{

	/*------------------------------------------------------------------*\
	 |*							Constructeurs							*|
	 \*------------------------------------------------------------------*/

	@Before
	public void before()
		{
		// rien
		}

	@After
	public void after()
		{
		// rien
		}

	/*------------------------------------------------------------------*\
	 |*							Methodes Public							*|
	 \*-----------------------------------------------------------------*/

	@Test
	public void testDessinSurface()
		{
		Dessin d1 = new Dessin("Draw");

		Formes carre = new Carres("carre1", 5);
		Formes rectangle = new Rectangles("rect1", 5, 2);
		Formes cercle = new Cercles("cercle1", 3);

		d1.add(carre);
		d1.add(rectangle);
		d1.add(cercle);

		assertTrue((carre.surface() + rectangle.surface() + cercle.surface()) == d1.surface());
		}

	@Test
	public void testDessinPerimetre()
		{

		Dessin d1 = new Dessin("Draw");

		Formes carre = new Carre("carre1", 5);
		Formes rectangle = new Rectangle("rect1", 5, 2);
		Formes cercle = new Cercle("cercle1", 3);

		d1.add(carre);
		d1.add(rectangle);
		d1.add(cercle);

		assertTrue((carre.perimetre() + rectangle.perimetre() + cercle.perimetre()) == d1.perimetre());
		}

	@Test
	public void testRectangleSurface()
		{
		int w = 5;
		int h = 2;
		Formes rectangle = new Rectangle("rect1", w, h);

		assertTrue(rectangle.surface() == (w * h));
		}

	@Test
	public void testRectanglePerim()
		{
		int w = 5;
		int h = 2;
		Formes rectangle = new Rectangle("rect1", w, h);

		assertTrue(rectangle.perimetre() == (2 * w + 2 * h));
		}

	@Test
	public void testCerclePerim()
		{
		int r = 5;
		Formes cercle = new Cercle("c1", r);

		assertTrue(cercle.perimetre() == (Math.PI * r));
		}

	@Test
	public void testCercleSurface()
		{
		int r = 5;
		Formes cercle = new Cercle("c1", r);

		assertTrue(cercle.surface() == (Math.PI * r * r));
		}

	@Test
	public void testFormesIsEquals()
		{
		int r = 5;
		Formes cercle1 = new Cercle("c1", r);
		Formes cercle2 = new Cercle("c2", r);

		double epsilon = Math.pow(10, -3);

		boolean b = MathTools.isEquals(cercle1.perimetre(), cercle2.perimetre(), epsilon) && MathTools.isEquals(cercle1.surface(), cercle2.surface(), epsilon) && cercle1.getNom().equals(cercle2.getNom());

		assertTrue(b == cercle1.isEquals(cercle2, epsilon));
		}

	@Test
	public void testCloneOf()
		{
		Formes cercle1 = new Cercle("c1", 5);
		Formes cercle2 = cercle1.cloneOf();

		//Les mÃªmes
		assertTrue(cercle1.isEquals(cercle2, 0));

		//Verif nouvelle instence
		cercle1.setNom("newNom");
		assertTrue(cercle1.getNom() != cercle2.getNom());
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	}
