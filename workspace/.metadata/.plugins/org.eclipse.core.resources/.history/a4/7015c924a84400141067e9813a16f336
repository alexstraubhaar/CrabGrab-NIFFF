
package ch.hearc.coursjava.kitbase.Quadratic;

import com.bilat.tools.io.console.Clavier;

public class Quadratic
	{
	
	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/
	
	/**
	 * Saisir coefficient a b c d'une equation quadratique
	 * @return un tableaux contenant les trois coefficients
	 */
	public static double[] saisir()
		{
		double a;
		do
			{
			a = Clavier.lireDouble("a = ");
			} while(a == 0);
		
		double b = Clavier.lireDouble("b = ");
		double c = Clavier.lireDouble("c = ");
		
		return new double[] { a, b, c };
		}
	
	public static void print(double[] tabCoefficient, double[] tabSolutions)
		{
		System.out.println("Quadratic function ƒ(x) = 0 in domain {R} where ƒ(x) = (" + tabCoefficient[0] + ")x² + (" + tabCoefficient[1] + ")x + (" + tabCoefficient[2] + ") has " + "solution(s):");
		if (tabSolutions != null)
			{
			//version1
			for(int i = 1; i <= tabSolutions.length; i++)
				{
				System.out.println(tabSolutions[i - 1]);
				}
			//version2
			for(double xi:tabSolutions)
				{
				System.out.println(xi);
				}
			}
		else
			{
			System.out.println("Pas de solutions.");
			}
		}
	
	/**
	 * @param tabCoefficient
	 * @return La taille du tableaux depend du nombre de solutions,<b> si </b> aucune solutions renvoi nul
	 */
	public static double[] solve(double[] tabCoefficient)
		{
		double determinant = determinant(tabCoefficient);
		
		if (determinant > 0)
			{
			double[] result = new double[2];
			result[0] = (-tabCoefficient[1] + Math.sqrt(determinant)) / (2 * tabCoefficient[0]);
			result[1] = (-tabCoefficient[1] - Math.sqrt(determinant)) / (2 * tabCoefficient[0]);
			return result;
			}
		else if (determinant < 0)
			{
			return null;
			}
		else
			{
			return new double[] { (-1) * tabCoefficient[1] / (2 * tabCoefficient[0]) };
			}
		}
	
	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/
	
	private static double determinant(double[] tabCoefficient)
		{
		return (tabCoefficient[1] * tabCoefficient[1]) - 4 * (tabCoefficient[0] * tabCoefficient[2]);
		}
	
	}
