1: Ecrire des tests unitaires pour valider la classe quadratique
2: Vous allez m'ï¿½crire l'ï¿½quivalent de la boucle for(int i=1; i<=n;i++) sans utiliser de type simple
3: Exercices supplï¿½mentaires: Ajouter les assertions nï¿½cessaires dans la classe quadratique
4: Implï¿½menter UseQuadratique ARGS
-------------------------------------------
	09.10.2014 Todo
-------------------------------------------
1: Deployment: Get a Linux & Windows VM 

-------------------------------------------
	30.10.2014 Todo
-------------------------------------------
Usetab2dTriangulaire(afficher, peupler, creer(n))
useTab2dHeterogene()
	creer(int[] tabNbColonnesParLigne)
tabtools2d
	isEgal(tab, epsilon)
	
-------------------------------------------
	06.11.2014 Todo
-------------------------------------------

Implï¿½menter la classe quadratique sous forme objet
Indication :
- Discrimant est un attribut de type tools
- Utiliser une mï¿½thode discriminant privï¿½e qui calcule le discriminant

Redï¿½finir la mï¿½thode toString() pour afficher a, b, c, x.
Faire les mï¿½thodes cloneOf, constructeurs de copie), isEquals pour la classe quadratique

---------------------------------------
	13.11.2014 TODO
---------------------------------------
Amï¿½liorer CompareTo pour trier par nombre de Roue si les marques sont identiques.
Injecter des voitures supplï¿½mentaire pour tester l'exercice prï¿½cï¿½dent

---------------------------------------
	27.11.2014 TODO
---------------------------------------
Test JUnit : tester que la classe complexe fonctionne
 - Placer n nombre complexe zi autour d'un centre c, lui aussi complexe.
 - Les n nombres seront rï¿½partis de faï¿½on homogï¿½ne sur le cercle.
 - Calculer la gravitï¿½ et vï¿½rifier que la gravitï¿½ est ï¿½gal au centre (utiliser epsilon)
 Rapel : cjunit + Ctrl + espace (dans un fichier sï¿½parï¿½ nommï¿½ TestComplexe !)
 
 Continuer le UseEcole
 - Trier par nombre d'ï¿½tudiants, si le nombre d'ï¿½tudiants est ï¿½gal : trier par superficie. 
 - Crï¿½er une class Comparator
 
 ---------------------------------------
	04.12.2014 TODO
---------------------------------------
Threads :
- Vous avez 2 tableaux ayant le meme nombre de cases n, reprï¿½sentant des vecteurs.
- Ecrire un programme sur 2 threads qui additionne les vecteurs
- de maniï¿½re parallï¿½le.
- Le code doit ï¿½tre simple, court et lisible



 ---------------------------------------
	15.01.2015 TODO
---------------------------------------
1) faire la calsse HmsiTimes (avec milisecondes) et use de HmsiTimes
2) implï¿½menter les 9 solutions vues sur exercice papier
3) implï¿½menter les versions Master, BAD et BEST des types ENUM doA, doB et doC
4) faire la hiï¿½rarchie des classes A<-B<-C et cï¿½rifier que nameClasse affiche "CCC"


---------------------------------------
	22.01.2015 TODO
---------------------------------------
1) Implï¿½menter les 9 solutions vues sur exercice papier (avec la notion classe abstraite)
2) Implï¿½menter les versions Master, BAD et BEST des types ENUM doA, doB et doC (avec la notion classe abstraite)
3) Faire la hiï¿½rarchie des classes A<-B<-C et cï¿½rifier que nameClasse affiche "CCC" (avec la notion classe abstraite)
4) Implï¿½menter la hiï¿½rarchie de classe "animal" (avec la notion de classe abstraite)
5) Vï¿½rifier sa note dans ISA
6) Rï¿½cupï¿½rer et consulter le PDF de l'exercice "Pile-TAS" dans le dossier du cours

---------------------------------------
	26.01.2015 TODO
---------------------------------------
1) Programme en deux fenÃªtres.
FenÃªtre 1 N bouton.
FenÃªtre 2 N label.
Label 1 indique le nombre de fois que l'on a cliquÃ© sur le bouton 1.
Label 2 indique le nombre de fois que l'on a cliquÃ© sur le bouton 2.
etc...
Fermeture d'une des deux fenÃªtre tue la JVM.
Contrainte : lecteur en admiration devant la beautÃ© du code...

Le nombre N sera passÃ© de l'utilisateur au programme par une propriÃ©tÃ© system ou en ligne de commande.

2) finir JFrameBoutonBouton

---------------------------------------
	26.02.2015 TODO
---------------------------------------
1) Digérer exercice animation sans layout
2) Par equipe de 3: confrontation / amélioration exercice bouton label compteur

Qui a encodé ce fichier texte?!?

----------------------------------------
	12.03.2015 TODO
----------------------------------------
Appliquer régles de composition (voir package composition) au package animation.

[JPanel/Box:[Start][Stop]     ]
[           Button            ]

UseJFrameAnimation & JFrameAnimation -> appliquer regles de composition
Hierarchie:
JPanelAnimation : tout code ici
JPanelControl & JPanelBouton

---- NOT DONE
Je clique sur le label de JFrameAjoutDynamique -> j'efface le label.
Numeroter les labels.
---

----------------------------------------
	19.03.2015 TODO
----------------------------------------

Lecture du code UseJFrameOnglet etc.
Lecture du code à moi.

---- JFrameAjoutDynamique ----
Je clique sur le label de JFrameAjoutDynamique -> j'efface le label.
Numeroter les labels.
---

Faire une classe "Aplication": Singleton.
-> instancier les deux JFrameDeco and Undeco
-> methode public switch() -> fait le job de switcher les panels entre les frames
La classe Application est une classe CUSTOM à NOUS.

Singleton Rappel:
Une instance!
Constructeur privé.
Obtention Instance avec methode statique synchronized getInstance().
Un attribut statique representant l'instance (Type de l'attribut est le NOM de la CLASSE).
Un if dans getInstance() qui crée l'instance si elle n'existe pas sinon renvoit l'instance.

----------------------------------------
	26.03.2015 TODO
----------------------------------------
[ Canevas: cjpanel, cjframe ]
- faire un UseDessinBouton (+ panel + frame) avec un dégradé de en haut à gauche -> en bas à droite
	--> Faire un rectangle "par-dessus" le bouton pour afficher la couleur du gradient
	--> Faire en sorte que le label du bouton apparaisse tout de même (appeler le super.paintComponent au bon moment!)
	
----------------------------------------
	02.04.2015 TODO
----------------------------------------

Revoir le code dans le package "pixelbypixel"

----------------------------------------
	16.04.2015 TODO
----------------------------------------

Ecrire un test unitaire qui valide la méthode clone de la classe SerializerTools sur le classe équipe.


----------------------------------------
	30.04.2015 TODO
----------------------------------------

a)Refaire la classe AddPoolStupid dans une autre classe
Contraintes :

- une seule instance de Callable
- instance <Void>


b)
liste 3 étudiants
	- Resp GUI
	- Resp Réseau
	- Resp 
