
package ch.hearc.coursjava.moo.heritage.dessin;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class Dessin implements Iterable<Formes>
	{
	
	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/
	
	public Dessin(String nom)
		{
		this.nom = nom;
		this.listFormes = new LinkedList<Formes>();
		}
	
	public Dessin(Dessin src)
		{
		this(src.nom);
		
		for(Formes forme:src)
			{
			this.listFormes.add(forme.cloneOf());
			}
		}
	
	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/
	
	public Dessin cloneOf()
		{
		return new Dessin(this);
		}
	
	public double perimetre()
		{
		double perimetreValue = 0;
		for(Formes forme:this)
			{
			perimetreValue += forme.perimetre();
			}
		return perimetreValue;
		}
	
	public double surface()
		{
		double surfaceValue = 0;
		for(Formes forme:this)
			{
			surfaceValue += forme.surface();
			}
		return surfaceValue;
		}
	
	@Override
	public Iterator<Formes> iterator()
		{
		return listFormes.iterator();
		}
	
	public int size()
		{
		return listFormes.size();
		}
	
	@Override
	public String toString()
		{
		StringBuilder builder = new StringBuilder();
		builder.append("Dessin [nom=");
		builder.append(this.nom);
		builder.append(", listFormes=");
		builder.append(this.listFormes);
		builder.append(" ]  [Perimetre=");
		builder.append(this.perimetre());
		builder.append(" Surface=");
		builder.append(this.surface());
		builder.append("] [");
		
		for(Formes forme:this)
			{
			builder.append(forme.toString() + "\n");
			}
		
		builder.append("]");
		return builder.toString();
		}
	
	public boolean add(Formes forme)
		{
		// TODO Auto-generated method stub
		return this.listFormes.add(forme);
		}
	
	/*------------------------------*\
	|*				Is				*|
	\*------------------------------*/
	
	public boolean isEqual(Dessin dessin2, double epsilon)
		{
		if (this.nom.equals(dessin2.nom) && this.size() != dessin2.size())
			{
			return false;
			}
		else
			{
			Iterator<Formes> it = dessin2.iterator();
			for(Formes forme:this)
				{
				if (!forme.isEquals(it.next(), epsilon)) { return false; }
				}
			return true;
			}
		
		}
	
	/*------------------------------*\
	|*				Set				*|
	\*------------------------------*/
	
	/*------------------------------*\
	|*				Get				*|
	\*------------------------------*/
	
	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/
	
	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/
	
	//Inputs
	private String nom;
	
	//Tools
	private List<Formes> listFormes;
	
	}
