
package ch.hearc.coursjava.kitbase.Quadratic;

import com.bilat.tools.io.console.Clavier;

public class Quadratic
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static double[] saisir()
		{
		double a;
		do
			{
			a = Clavier.lireDouble("a = ");
			} while(a == 0);

		double b = Clavier.lireDouble("b = ");
		double c = Clavier.lireDouble("c = ");

		return new double[]{a,b,c};
		}

	public static void print(double[] tabCoefficient)
		{
		System.out.println("Quadratic function ƒ(x) = 0 in domain {R} where ƒ(x) = (" + tabCoefficient[0] + ")x² + (" + tabCoefficient[1] + ")x + (" + tabCoefficient[2] + ") has " + "solution(s):");
		if (calculate(tabCoefficient) == null)
			{
			System.out.println("This function has no solution in domain {R}!");
			}
		else
			{
			double[] result = calculate(tabCoefficient);
			if (result.length > 1)
				{
				System.out.println(result[0] + " and " + result[1]);
				}
			else
				{
				System.out.println(result[0]);
				}
			}
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private static double[] calculate(double[] tabCoefficient)
		{
		double testval = determinant(tabCoefficient);

		if (testval > 0)
			{
			double[] result = new double[2];
			result[0] = (-tabCoefficient[1] + Math.sqrt(determinant(tabCoefficient))) / (2 * tabCoefficient[0]);
			result[1] = (-tabCoefficient[1] - Math.sqrt(determinant(tabCoefficient))) / (2 * tabCoefficient[0]);
			return result;
			}
		else if (testval < 0)
			{
			return null;
			}
		else
			{
			double[] result = new double[1];
			result[0] = ((-1)*tabCoefficient[1]) / (2 * tabCoefficient[0]);
			return result;
			}
		}

	private static double determinant(double[] tabCoefficient)
		{
		return (tabCoefficient[1] * tabCoefficient[1]) - 4 * (tabCoefficient[0] * tabCoefficient[2]);
		}

	}
