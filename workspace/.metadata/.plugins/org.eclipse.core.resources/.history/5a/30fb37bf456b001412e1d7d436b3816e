1: Ecrire des tests unitaires pour valider la classe quadratique
2: Vous allez m'écrire l'équivalent de la boucle for(int i=1; i<=n;i++) sans utiliser de type simple
3: Exercices supplémentaires: Ajouter les assertions nécessaires dans la classe quadratique
4: Implémenter UseQuadratique ARGS
-------------------------------------------
	09.10.2014 Todo
-------------------------------------------
1: Deployment: Get a Linux & Windows VM 

-------------------------------------------
	30.10.2014 Todo
-------------------------------------------
Usetab2dTriangulaire(afficher, peupler, creer(n))
useTab2dHeterogene()
	creer(int[] tabNbColonnesParLigne)
tabtools2d
	isEgal(tab, epsilon)
	
-------------------------------------------
	06.11.2014 Todo
-------------------------------------------

Implémenter la classe quadratique sous forme objet
Indication :
- Discrimant est un attribut de type tools
- Utiliser une méthode discriminant privée qui calcule le discriminant

Redéfinir la méthode toString() pour afficher a, b, c, x.
Faire les méthodes cloneOf, constructeurs de copie), isEquals pour la classe quadratique

---------------------------------------
	13.11.2014 TODO
---------------------------------------
Améliorer CompareTo pour trier par nombre de Roue si les marques sont identiques.
Injecter des voitures supplémentaire pour tester l'exercice précédent

---------------------------------------
	27.11.2014 TODO
---------------------------------------
Test JUnit : tester que la classe complexe fonctionne
 - Placer n nombre complexe zi autour d'un centre c, lui aussi complexe.
 - Les n nombres seront répartis de façon homogène sur le cercle.
 - Calculer la gravité et vérifier que la gravité est égal au centre (utiliser epsilon)
 Rapel : cjunit + Ctrl + espace (dans un fichier séparé nommà TestComplexe !)